# 
# we  need most viable testcase
# good to scale, 
# good to specific purpose
# good to find critical error
# 
# MP_Templete
# &MP_(2*T(a))>=1
# 
# Always UNSAT
GFa&MP^(1-2*T(a))<=0&MP_(1-2*T(a))>0
#
# 4bit-counter, a appears at most 1/5
# SAT
MP^(2*T(a))<=1&&MP_(T(a))>=0&&(((a) && ( G(a -> ((X(!a)) && (X(X(!a))) && (X(X(X(!a)))) && X(X(X(X(a)))))))) && ((!b) && (X(!b)) && (X(X(!b))) && (X(X(X(!b))))) && (G ((a && (!b)) -> ( (X(X(X(X(b))))) && (X ( ( (!a) && (b -> (X(X(X(X(b)))))) && ((!b) -> (X(X(X(X(!b)))))) ) U (a) ) ) ))) && (G( (a && b) -> ((X(X(X(X(!b))))) && (X ( (b && (!a) && (X(X(X(X(!b)))))) U (a || ((!a) && (!b) && (X(X(X(X(b))))) && ( X( ( (!a) && (b -> (X(X(X(X(b)))))) && ((!b) -> (X(X(X(X(!b)))))) ) U a ) ) ) ) ) ) ) ) ))
#
# 4bit-counter, a apppears at most 1/1000
# UNSAT
MP^(1000*T(a))<=1&&MP_(T(a))>=0&&(((a) && ( G(a -> ((X(!a)) && (X(X(!a))) && (X(X(X(!a)))) && X(X(X(X(a)))))))) && ((!b) && (X(!b)) && (X(X(!b))) && (X(X(X(!b))))) && (G ((a && (!b)) -> ( (X(X(X(X(b))))) && (X ( ( (!a) && (b -> (X(X(X(X(b)))))) && ((!b) -> (X(X(X(X(!b)))))) ) U (a) ) ) ))) && (G( (a && b) -> ((X(X(X(X(!b))))) && (X ( (b && (!a) && (X(X(X(X(!b)))))) U (a || ((!a) && (!b) && (X(X(X(X(b))))) && ( X( ( (!a) && (b -> (X(X(X(X(b)))))) && ((!b) -> (X(X(X(X(!b)))))) ) U a ) ) ) ) ) ) ) ) ))
## 
# E_1(n) ANDS(F(p_i))  --> min 2^n(NBA)
# 0:03 for LTL2TGBA
# Fa1&Fa2&Fa3&Fa4&Fa5&Fa6&Fa7&Fa8&MP_(2*T(a))>=1
# E_2(n) min (n+1)^2(NBA)
# 0:01 for TGBA 
# (F(p1&F(p2&F(p3&Fp4))))&(F(q1&F(q2&F(q3&Fq4))))&MP_(2*T(a))>=1
# 2:40 for ltl2tgba
# F(p1&F(p2&F(p3&F(p4&F(p5&F(p6))))))&F(q1&F(q2&F(q3&F(q4&F(q5&F(q6))))))&MP_((2*T(a))>=1
#
# U_(n) = (p1U(p2U(p3U(...Upn)) 
#p1Up2&MP_(2*T(p2))>=1
#p1Up2Up3Up4&MP_(2*T(p2))>=1
# 0.1sec for ltl2tgba
#p1Up2Up3Up4Up5Up6&MP_(2*T(p2))>=1
# tooslow ltl2tgba n/a <3min
# p1Up2Up3Up4Up5Up6Up7Up8&MP_(2*T(p2))>=1
#
# C(n) min n+1(NBA)
#GFp1&GFp2&GFp3&MP_(2*T(p1Up3))>=1
#GFp1&GFp2&GFp3&GFp4&GFp5&GFp6&MP_(2*T(p1Up5))>=1
# elevetor-3
# 0:30 for ltl2tgba
(([]((loc_0) || (loc_1) || (loc_2))) && ([]((loc_0 -> ((! loc_1) && (! loc_2))) && (loc_1 -> ((! loc_0) && (! loc_2))) && (loc_2 -> ((! loc_0) && (! loc_1))))) && ([](((req_btn_0 -> (<>loc_0 && (loc_0  V req_l_0)))) && ((req_btn_1 -> (<>loc_1 && (loc_1  V req_l_1)))) && ((req_btn_2 -> (<>loc_2 && (loc_2  V req_l_2)))))) && ([](((loc_0 && req_l_0) -> (open && (move V (loc_0 || move)))) && ((loc_1 && req_l_1) -> (open && (move V (loc_1 || move)))) && ((loc_2 && req_l_2) -> (open && (move V (loc_2 || move)))))) && ([](((loc_0 && move) -> (req_btn_0 V (!req_l_0 || req_btn_0))) && ((loc_1 && move) -> (req_btn_1 V (!req_l_1 || req_btn_1))) && ((loc_2 && move) -> (req_btn_2 V (!req_l_2 || req_btn_2))))) && ([](((loc_0 && ! req_l_0) -> !open) && ((loc_1 && ! req_l_1) -> !open) && ((loc_2 && ! req_l_2) -> !open))) && ([](((loc_0 && req_l_2) -> ((!loc_2 U (!loc_2 && loc_1)))))) && ([](((loc_2 && req_l_0) -> ((!loc_0 U (!loc_0 && loc_1)))))) && ([](open -> (!open V (!open || !move)))) && ([](!open -> (open V (open || move)))) && ([](open -> <> open_timed_out)) && ([]((open_btn && !open_timed_out) -> open_req)) && ([](open_timed_out-> !open)) && ([]((close_btn && !open_req) -> !open)) && ([]((open_req && !move) -> open)))&&MP^(3*T(move)+1*T(!move&&open))<=2&&MP_(5*T(loc_0))>=1&&MP_(100*T(loc_0))<=1&&MP_(10*T(req_btn_2))<=1
#
#
#
# Arbitary Tests
#(a&GFb&FaUb|bUa|GF(aUXXXXXb))&MP^(1*5+9*T(a|b|MP^(9+T(aUb))<=1))<=0
#(a&GFb&FaUb|bUa|GFaUXXXbUXgUbUh)&MP_(1*5-9*T(GFaUb))<=0
#MP_(2*T(a))>=1&MP^(2*T(b))<=1&MP_(T(b))>=0&MP_(10*T(a&XXXb))>=1 & (a&GFb&FaUb|bUa|GF(aUXXXXXb))
#(G F a & G F b & F G c | G F d | G F n | G F c & GF h) & MP_(T(a))>=1
#
#
# end test